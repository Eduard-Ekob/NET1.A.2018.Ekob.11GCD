using Floatpointconverter;
using NUnit.Framework;

namespace FloatpointconverterTests
{
    using System;

    [TestFixture]
    public class DoubleToBinaryStringFormatTests
    {
        [TestCase(-255.255, ExpectedResult = "1100000001101111111010000010100011110101110000101000111101011100")]
        [TestCase(255.255, ExpectedResult = "0100000001101111111010000010100011110101110000101000111101011100")]
        [TestCase(4294967295.0, ExpectedResult = "0100000111101111111111111111111111111111111000000000000000000000")]
        [TestCase(double.MinValue, ExpectedResult = "1111111111101111111111111111111111111111111111111111111111111111")]
        [TestCase(double.MaxValue, ExpectedResult = "0111111111101111111111111111111111111111111111111111111111111111")]
        [TestCase(double.Epsilon, ExpectedResult = "0000000000000000000000000000000000000000000000000000000000000001")]
        [TestCase(double.NaN, ExpectedResult = "1111111111111000000000000000000000000000000000000000000000000000")]
        [TestCase(double.NegativeInfinity, ExpectedResult = "1111111111110000000000000000000000000000000000000000000000000000")]
        [TestCase(double.PositiveInfinity, ExpectedResult = "0111111111110000000000000000000000000000000000000000000000000000")]
        [TestCase(-0.0, ExpectedResult = "1000000000000000000000000000000000000000000000000000000000000000")]
        [TestCase(0.0, ExpectedResult = "0000000000000000000000000000000000000000000000000000000000000000")]
        [TestCase(-3576987145.45114756314, ExpectedResult = "1100000111101010101001101000111111000001001011100110111111001101")]
        [TestCase(0.1245721451781456484, ExpectedResult = "0011111110111111111000111111010111001001100010000101111100000001")]
        [TestCase(1451.244457851E-12, ExpectedResult = "0011111000011000111011101010001111111111111110010111011110010001")]


        public string DoubleToIEEE754Test_TakeDoubleValue_ReturnBinaryString(double sourceD)
        {
            return sourceD.DoubleToIEEE754();
        }               
    }
}
